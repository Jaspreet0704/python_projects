# -*- coding: utf-8 -*-
"""cnn.image.detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1buVvckQnoy7ibzhbTV_izeoFXNgQw0gm
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d razinw/bird-vs-butterfly

import zipfile
b_data = zipfile.ZipFile('/content/bird-vs-butterfly.zip')
b_data.extractall('/content/')
b_data.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

import matplotlib.pyplot as plt
import cv2

img =  cv2.imread('/content/birdvsbutterfly/test/0/270.jpg')
img

plt.imshow(img)

img.shape

train_data = tf.keras.utils.image_dataset_from_directory(
                directory='/content/birdvsbutterfly/train',
                labels='inferred',
                label_mode='int',
                color_mode='rgb',
                batch_size=16,
                image_size=(256,256)
            )

test_data = tf.keras.utils.image_dataset_from_directory(
                directory='/content/birdvsbutterfly/test',
                labels='inferred',
                label_mode='int',
                color_mode='rgb',
                batch_size=16,
                image_size=(256,256)
            )

print(f'Number of batches: ',{500//16})

65/255, 134/255, 421/255



def scale_down_px(image, label):
  image = tf.cast(image/255, tf.float32)

  return image, label

train_data = train_data.map(scale_down_px)
test_data = test_data.map(scale_down_px)

train_data

img/255

model = Sequential()

model.add(Conv2D(16, kernel_size=(3, 3), padding='valid', activation='relu', input_shape=(256, 256, 3)))
model.add(MaxPooling2D(pool_size=(2, 2), strides=2, padding='valid'))
model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dense(64,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, validation_data = test_data, epochs=10)

plt.plot(history.history['accuracy'],color='g', label='training accuracy')
plt.plot(history.history['val_accuracy'],color='r', label='validation accuracy')
plt.legend()
plt.show()

from keras.layers import batchNormalization, Dropout

plt.plot(history.history['loss'], color='g', label='training loss')
plt.plot(history.history['val_loss'], color='r', label='validation loss')
plt.legend()
plt.show()

test_img = cv2.imread('/content/birdvsbutterfly/test/0/254.jpg')

plt.imshow(test_img)

test_img.shape

test_img = cv2.resize(test_img, (256,256))

plt.imshow(test_img)

test_img.shape

test_img

test_input = test_img.reshape(1,256,256,3)
test_input

model.predict(test_input)

model.predict(test_input)[0]

model.predict(test_input)[0][0]

output = model.predict(test_input)[0][0]
print(f'Output is: {output} \n')

if output < 0.5:
  print('This is a bird')
else:
  print('This is a butterfly')

def test_image(img_source):
  test_img = cv2.imread(img_source)
  test_img = cv2.resize(test_img, (256,256))
  plt.imshow(test_img)
  test_input = test_img.reshape(1,256,256,3)

  output = model.predict(test_input)[0][0]
  print(f'Output is: {output} \n')

  if output < 0.5:
    print('This is a bird')
  else:
    print('This is a butterfly')

test_image('/content/birdvsbutterfly/test/1/256.jpg')

test_image('/content/birdvsbutterfly/test/0/260.jpg')

test_image('/content/birdvsbutterfly/train/0/101.jpg')

test_image('/content/birdvsbutterfly/train/1/103.jpg')

